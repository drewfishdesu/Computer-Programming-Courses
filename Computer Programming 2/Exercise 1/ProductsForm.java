package com.mycompany.comprog2_exercise1;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author alasacriz
 */
public class ProductsForm extends javax.swing.JFrame {

    static void open() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    /**
     * Creates new form ProductsForm
     */
    public ProductsForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        btnStockIn = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        productID = new javax.swing.JTextField();
        productType = new javax.swing.JTextField();
        productDesc = new javax.swing.JTextField();
        productSupplier = new javax.swing.JTextField();
        productPrice = new javax.swing.JTextField();
        productThreshold = new javax.swing.JTextField();
        productCurrentQuantity = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        productAddQuantity = new javax.swing.JTextField();
        totalCost = new javax.swing.JTextField();
        dateReceived = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        openCustomers = new javax.swing.JMenuItem();
        openSuppliers = new javax.swing.JMenuItem();
        btnClose = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel1.setText("Product Stock-In/Stock-Out Form");

        jLabel2.setText("Product ID");

        jLabel3.setText("Product Type");

        jLabel4.setText("Product Description");

        jLabel5.setText("Supplier");

        jLabel6.setText("Product Price");

        jLabel7.setText("Threshold Quantity");

        jLabel8.setText("Quantity");

        jLabel9.setText("Total Cost");

        jLabel10.setText("Date Received");

        btnStockIn.setText("Stock In");
        btnStockIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStockInActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        productID.setEditable(false);

        jLabel11.setText("+");

        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Product ID", "Product Type", "Description", "Supplier", "Price", "Threshold Quantity", "Total Cost", "Date Received"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productTable);

        jMenu1.setText("Open");

        openCustomers.setText("Customers");
        openCustomers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                openCustomersMouseClicked(evt);
            }
        });
        openCustomers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openCustomersActionPerformed(evt);
            }
        });
        jMenu1.add(openCustomers);

        openSuppliers.setText("Suppliers");
        openSuppliers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openSuppliersActionPerformed(evt);
            }
        });
        jMenu1.add(openSuppliers);

        btnClose.setText("Exit");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        jMenu1.add(btnClose);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnStockIn)
                        .addGap(18, 18, 18)
                        .addComponent(btnEdit)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete))
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(productID)
                            .addComponent(productType)
                            .addComponent(productDesc)
                            .addComponent(productSupplier)
                            .addComponent(productPrice)
                            .addComponent(productThreshold)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(productCurrentQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(productAddQuantity))
                            .addComponent(totalCost)
                            .addComponent(dateReceived))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel1)
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(productID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(productType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(productDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(productSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(productPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(productThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(productCurrentQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(productAddQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(totalCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(dateReceived, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnStockIn)
                            .addComponent(btnEdit)
                            .addComponent(btnDelete))))
                .addGap(31, 31, 31))
        );

        pack();
    }// </editor-fold>                        
    // Intialize the array
    String[][] prod = new String[100][6];
    
    // Function Definition
    // Refreshes the table
    
    public void refreshtable()
    {
        DefaultTableModel prod_table = (DefaultTableModel) productTable.getModel();
        prod_table.setRowCount(0);
        for(int i = 0; i < pnum; i++)
        {
            // Prevents the array from printing null values.
            if(prod[i][0] != null)
            {
                prod_table.addRow(prod[i]);
            }
        }
    }
    
    private int[] collectIDs()
    {
        DefaultTableModel model = (DefaultTableModel) productTable.getModel();
        int rowCount = model.getRowCount(); // Gets the number of rows in the table
        int[] ids = new int[rowCount]; // Creates an array to store the IDs
        
        for(int i = 0; i < rowCount; i++)
        {
            Object idValue = model.getValueAt(i, 0); // Gets the values from the first column (ID column)
            if(idValue != null)
            {
                ids[i] = Integer.parseInt(idValue.toString()); // Converts the value to an integer
            }
        }
        return ids;
    }
    
    int pnum = 0;
    
    private void btnStockInActionPerformed(java.awt.event.ActionEvent evt) {                                           
    // Asks the user for confirmation
        int response = JOptionPane.showConfirmDialog(
            this,
            "Do you want to save this entry?",
            "Confirm Save",
            JOptionPane.YES_NO_OPTION
        );
        
        // Checks the user's response
        if(response == JOptionPane.YES_OPTION)
        {
            DefaultTableModel prod_table = (DefaultTableModel) productTable.getModel();

            // Clears the table
            if(pnum == 0)
            {
                prod_table.setRowCount(0);
            }

            // Sorts the existing IDs into an array
            int[] existingIDs = collectIDs();

            // Bubble sorts the array
            for(int i = 0; i < existingIDs.length - 1; i++)
            {
                for(int j = 0; j < existingIDs.length - 1 - i; j++)
                {
                    if(existingIDs[j] > existingIDs[j + 1])
                    {
                        int temp = existingIDs[j];
                        existingIDs[j] = existingIDs[j + 1];
                        existingIDs[j + 1] = temp;
                    }
                }
            }

            // Finds the smallest missing ID
            int newID = 1; // Starts the ID from 1
            for(int i = 0; i < existingIDs.length; i++)
            {
                int id = existingIDs[i];
                if(id == newID)
                {
                    newID++; // Increment if no gap is found
                }
                else if(id > newID)
                {
                    break;
                }
            }
            
            // Sets the new ID in the text field of the array
            productID.setText(String.valueOf(newID));
            prod[pnum][0] = String.valueOf(newID);
            
            // Gets data from input
            prod[pnum][1] = productType.getText();
            prod[pnum][2] = productDesc.getText();
            prod[pnum][3] = productSupplier.getText();
            prod[pnum][4] = productPrice.getText();
            prod[pnum][5] = productThreshold.getText();
            prod[pnum][6] = productCurrentQuantity.getText();
            prod[pnum][7] = totalCost.getText();
            prod[pnum][8] = dateReceived.getText();
            
            
            
            // Adds rows to the array
            prod_table.addRow(prod[pnum]);
            
            // Increments the counter
            pnum++;
        }
        else
        {
            JOptionPane.showMessageDialog(
                this,
                "Save operation canceled.",
                "Save Canceled",
                JOptionPane.INFORMATION_MESSAGE
            );
        }
    }                                          

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // Asks the user for confirmation
        int response = JOptionPane.showConfirmDialog(
            this,
            "Do you want to modify this entry?",
            "Confirm Edit",
            JOptionPane.YES_NO_OPTION
        );
        
        // Checks the user's response
        if(response == JOptionPane.YES_OPTION)
        {
        
            // Searches the ID
            for(int i = 0; i < pnum; i++)
            {
                if(productID.getText().equals(prod[i][0]))
                {
                    prod[i][1] = productType.getText();
                    prod[i][2] = productDesc.getText();
                    prod[i][3] = productSupplier.getText();
                    prod[i][4] = productPrice.getText();
                    prod[i][5] = productThreshold.getText();
                    prod[i][6] = productCurrentQuantity.getText();
                    prod[i][7] = totalCost.getText();
                    prod[i][8] = dateReceived.getText();
                }
            }
            // Calls the refreshtable() function
            refreshtable();
        }
        else
        {
            JOptionPane.showMessageDialog(
                this,
                "No changes were made.",
                "Edit Canceled",
                JOptionPane.INFORMATION_MESSAGE
            );
        }
    }                                       

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // Asks the user for confirmation
        int response = JOptionPane.showConfirmDialog(
            this,
            "Do you want to delete this entry?",
            "Confirm Save",
            JOptionPane.YES_NO_OPTION
        );
        
        // Checks the user's response
        if(response == JOptionPane.YES_OPTION)
        {
            // Pop-Up Confirmation
            JOptionPane.showMessageDialog(
                this,
                "Deleted one item successfully.",
                "Entry Deleted",
                JOptionPane.INFORMATION_MESSAGE
            );
            
        // Performs a search for the row that's going to be deleted
        for(int x = 0; x < pnum; x++)
        {
            int y = x;
            if(prod[x][0].equals(productID.getText()))
            {
                while(y < pnum)
                {
                    prod[y][0] = prod[y + 1][0];
                    prod[y][1] = prod[y + 1][1];
                    prod[y][2] = prod[y + 1][2];
                    prod[y][3] = prod[y + 1][3];
                    prod[y][4] = prod[y + 1][4];
                    prod[y][5] = prod[y + 1][5];
                    prod[y][6] = prod[y + 1][6];
                    prod[y][7] = prod[y + 1][7];
                    prod[y][8] = prod[y + 1][8];
                    y++;   
                }
                break;
            }
        }
        pnum--;
        refreshtable();
        }
    }                                         

    private void openCustomersMouseClicked(java.awt.event.MouseEvent evt) {                                           
        CustomerRegForm customersForm = new CustomerRegForm();
        customersForm.show();
        
    }                                          

    private void openCustomersActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
    }                                             

    private void openSuppliersActionPerformed(java.awt.event.ActionEvent evt) {                                              
        SupplierForm suppliersForm = new SupplierForm();
            suppliersForm.show();
    }                                             

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {                                         
        System.exit(0);
    }                                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProductsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProductsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProductsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProductsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProductsForm().setVisible(true);
            }
        });
    }
    
    

    // Variables declaration - do not modify                     
    private javax.swing.JMenuItem btnClose;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnStockIn;
    private javax.swing.JTextField dateReceived;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem openCustomers;
    private javax.swing.JMenuItem openSuppliers;
    private javax.swing.JTextField productAddQuantity;
    private javax.swing.JTextField productCurrentQuantity;
    private javax.swing.JTextField productDesc;
    private javax.swing.JTextField productID;
    private javax.swing.JTextField productPrice;
    private javax.swing.JTextField productSupplier;
    private javax.swing.JTable productTable;
    private javax.swing.JTextField productThreshold;
    private javax.swing.JTextField productType;
    private javax.swing.JTextField totalCost;
    // End of variables declaration                   
}
